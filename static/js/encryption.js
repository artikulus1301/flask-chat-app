// End-to-End Encryption for Client-Side
class ChatEncryption {
    constructor() {
        this.isEnabled = false;
        this.currentKey = null;
        this.algorithm = 'AES-GCM';
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    async generateKey() {
        try {
            const key = await crypto.subtle.generateKey(
                {
                    name: this.algorithm,
                    length: 256,
                },
                true,
                ['encrypt', 'decrypt']
            );
            
            // –≠–∫—Å–ø–æ—Ä—Ç –∫–ª—é—á–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
            const exported = await crypto.subtle.exportKey('jwk', key);
            this.currentKey = exported;
            
            return exported;
        } catch (error) {
            console.error('Error generating key:', error);
            throw error;
        }
    }

    // –ò–º–ø–æ—Ä—Ç –∫–ª—é—á–∞ –∏–∑ JSON
    async importKey(keyData) {
        try {
            const key = await crypto.subtle.importKey(
                'jwk',
                keyData,
                {
                    name: this.algorithm,
                    length: 256,
                },
                true,
                ['encrypt', 'decrypt']
            );
            
            this.currentKey = keyData;
            return key;
        } catch (error) {
            console.error('Error importing key:', error);
            throw error;
        }
    }

    // –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    async encryptMessage(message) {
        if (!this.isEnabled || !this.currentKey) {
            return {
                encrypted: false,
                content: message
            };
        }

        try {
            const key = await this.importKey(this.currentKey);
            const encoder = new TextEncoder();
            const data = encoder.encode(message);
            
            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è IV (Initialization Vector)
            const iv = crypto.getRandomValues(new Uint8Array(12));
            
            // –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
            const encrypted = await crypto.subtle.encrypt(
                {
                    name: this.algorithm,
                    iv: iv
                },
                key,
                data
            );
            
            // –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ IV –∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            const combined = new Uint8Array(iv.length + encrypted.byteLength);
            combined.set(iv);
            combined.set(new Uint8Array(encrypted), iv.length);
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ base64 –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
            const encryptedBase64 = btoa(String.fromCharCode(...combined));
            
            return {
                encrypted: true,
                content: encryptedBase64,
                key: JSON.stringify(this.currentKey)
            };
            
        } catch (error) {
            console.error('Encryption error:', error);
            throw error;
        }
    }

    // –î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    async decryptMessage(encryptedData, keyData) {
        if (!encryptedData.encrypted) {
            return encryptedData.content;
        }

        try {
            const key = await this.importKey(JSON.parse(keyData || this.currentKey));
            
            // –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ base64
            const encryptedBytes = Uint8Array.from(atob(encryptedData.content), c => c.charCodeAt(0));
            
            // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ IV –∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            const iv = encryptedBytes.slice(0, 12);
            const data = encryptedBytes.slice(12);
            
            // –î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
            const decrypted = await crypto.subtle.decrypt(
                {
                    name: this.algorithm,
                    iv: iv
                },
                key,
                data
            );
            
            const decoder = new TextDecoder();
            return decoder.decode(decrypted);
            
        } catch (error) {
            console.error('Decryption error:', error);
            return 'üîí [–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ]';
        }
    }

    // –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    toggleEncryption() {
        this.isEnabled = !this.isEnabled;
        
        if (this.isEnabled && !this.currentKey) {
            this.generateKey().then(key => {
                console.log('Encryption enabled with key:', key.k);
                this.showKeyWarning();
            });
        }
        
        return this.isEnabled;
    }

    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∫–ª—é—á–∞
    showKeyWarning() {
        if (!this.currentKey) return;
        
        const warning = `
            üîê –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ!
            
            –í–∞—à –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:
            ${this.currentKey.k}
            
            ‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ!
            –ë–µ–∑ –Ω–µ–≥–æ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–≤–æ–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
        `;
        
        if (confirm(warning)) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª –∫–ª—é—á
            console.log('User acknowledged encryption key');
        }
    }

    // –≠–∫—Å–ø–æ—Ä—Ç –∫–ª—é—á–∞ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    exportKey() {
        if (!this.currentKey) {
            return null;
        }
        
        return {
            key: this.currentKey,
            algorithm: this.algorithm,
            timestamp: new Date().toISOString()
        };
    }

    // –ò–º–ø–æ—Ä—Ç –∫–ª—é—á–∞ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    async importBackup(backupData) {
        try {
            if (backupData.algorithm !== this.algorithm) {
                throw new Error('Unsupported encryption algorithm');
            }
            
            await this.importKey(backupData.key);
            this.isEnabled = true;
            return true;
        } catch (error) {
            console.error('Backup import error:', error);
            throw error;
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
const chatCrypto = new ChatEncryption();

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª—é—á–∞–º–∏
class KeyManager {
    static generateSharedSecret() {
        const array = new Uint8Array(32);
        crypto.getRandomValues(array);
        return btoa(String.fromCharCode(...array));
    }

    static deriveKeyFromPassword(password, salt) {
        const encoder = new TextEncoder();
        return crypto.subtle.importKey(
            'raw',
            encoder.encode(password),
            'PBKDF2',
            false,
            ['deriveKey']
        ).then(baseKey => {
            return crypto.subtle.deriveKey(
                {
                    name: 'PBKDF2',
                    salt: encoder.encode(salt),
                    iterations: 100000,
                    hash: 'SHA-256'
                },
                baseKey,
                {
                    name: 'AES-GCM',
                    length: 256
                },
                true,
                ['encrypt', 'decrypt']
            );
        });
    }

    static async encryptWithPassword(message, password) {
        const salt = crypto.getRandomValues(new Uint8Array(16));
        const iv = crypto.getRandomValues(new Uint8Array(12));
        const key = await this.deriveKeyFromPassword(password, salt);
        
        const encoder = new TextEncoder();
        const data = encoder.encode(message);
        
        const encrypted = await crypto.subtle.encrypt(
            {
                name: 'AES-GCM',
                iv: iv
            },
            key,
            data
        );
        
        const combined = new Uint8Array(salt.length + iv.length + encrypted.byteLength);
        combined.set(salt);
        combined.set(iv, salt.length);
        combined.set(new Uint8Array(encrypted), salt.length + iv.length);
        
        return btoa(String.fromCharCode(...combined));
    }

    static async decryptWithPassword(encryptedData, password) {
        try {
            const encryptedBytes = Uint8Array.from(atob(encryptedData), c => c.charCodeAt(0));
            
            const salt = encryptedBytes.slice(0, 16);
            const iv = encryptedBytes.slice(16, 28);
            const data = encryptedBytes.slice(28);
            
            const key = await this.deriveKeyFromPassword(password, salt);
            
            const decrypted = await crypto.subtle.decrypt(
                {
                    name: 'AES-GCM',
                    iv: iv
                },
                key,
                data
            );
            
            const decoder = new TextDecoder();
            return decoder.decode(decrypted);
        } catch (error) {
            throw new Error('Decryption failed - wrong password or corrupted data');
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { ChatEncryption, KeyManager };
}