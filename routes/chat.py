from flask import Blueprint, render_template, request
from flask_socketio import emit, join_room, leave_room
from extensions import db, socketio
from models.message import Message, Group
from models.user import User
from datetime import datetime
import uuid

bp = Blueprint("chat", __name__, url_prefix="/chat")

# ==========================
#  –û–¢–†–ò–°–û–í–ö–ê –°–¢–†–ê–ù–ò–¶–´ –ß–ê–¢–ê
# ==========================
@bp.route("/")
def index():
    return render_template("index.html")


# ==========================
#  SOCKET.IO –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
# ==========================
def init_socket_handlers(socketio, db):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π —Å–æ–∫–µ—Ç–∞"""

    # --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ---
    @socketio.on("connect")
    def handle_connect():
        print(f"‚úÖ Client connected: {request.sid}")
        emit("connected", {"message": "Connected to chat server"})

    @socketio.on("disconnect")
    def handle_disconnect():
        print(f"‚ö†Ô∏è Client disconnected: {request.sid}")

    # --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    @socketio.on("user_connected")
    def handle_user_connected(data):
        username = data.get("username")
        user_uuid = data.get("uuid")

        if not username or not user_uuid:
            emit("error", {"error": "Missing username or uuid"})
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User.query.filter_by(uuid=user_uuid).first()
        if not user:
            user = User(uuid=user_uuid, username=username)
            db.session.add(user)
            db.session.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        groups = Group.query.all()
        emit("group_list", [g.to_dict() for g in groups])

    # --- –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã ---
    @socketio.on("create_group")
    def handle_create_group(data):
        name = data.get("name", "").strip()
        if not name:
            emit("error", {"error": "–ò–º—è –≥—Ä—É–ø–ø—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"})
            return

        new_group = Group(
            uuid=str(uuid.uuid4()),
            name=name,
            description=data.get("description", ""),
            created_by=None
        )
        db.session.add(new_group)
        db.session.commit()

        emit("group_created", new_group.to_dict(), broadcast=True)

    # --- –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –≥—Ä—É–ø–ø–µ ---
    @socketio.on("join_group")
    def handle_join_group(data):
        group_id = data.get("group_id")
        if not group_id:
            emit("error", {"error": "–ù–µ —É–∫–∞–∑–∞–Ω ID –≥—Ä—É–ø–ø—ã"})
            return

        join_room(group_id)
        print(f"üë• User {request.sid} joined group {group_id}")

        messages = (
            Message.query.filter_by(group_id=group_id)
            .order_by(Message.timestamp.asc())
            .all()
        )
        emit("chat_history", [m.to_dict() for m in messages])

    # --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ---
    @socketio.on("send_message")
    def handle_send_message(data):
        text = data.get("text", "").strip()
        group_id = data.get("group_id")
        sender_name = data.get("sender")
        sender_uuid = data.get("uuid")

        if not text or not group_id or not sender_uuid:
            emit("error", {"error": "–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"})
            return

        user = User.query.filter_by(uuid=sender_uuid).first()
        if not user:
            user = User(uuid=sender_uuid, username=sender_name)
            db.session.add(user)
            db.session.commit()

        msg = Message(
            uuid=str(uuid.uuid4()),
            group_id=group_id,
            user_id=user.id,
            content=text,
            timestamp=datetime.utcnow()
        )
        db.session.add(msg)
        db.session.commit()

        payload = {
            "text": text,
            "sender": sender_name,
            "uuid": sender_uuid,
            "group_id": group_id,
            "timestamp": msg.timestamp.isoformat()
        }
        emit("new_message", payload, room=group_id)

    # --- –í—ã—Ö–æ–¥ –∏–∑ –≥—Ä—É–ø–ø—ã ---
    @socketio.on("leave_group")
    def handle_leave_group(data):
        group_id = data.get("group_id")
        if not group_id:
            return
        leave_room(group_id)
        print(f"üö™ User {request.sid} left group {group_id}")
