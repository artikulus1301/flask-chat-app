import os
import sqlite3
from app import create_app
from extensions import db

app = create_app()

def migrate_database():
    with app.app_context():
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db_uri = app.config['SQLALCHEMY_DATABASE_URI']
            if db_uri.startswith('sqlite:///'):
                db_path = db_uri.replace('sqlite:///', '')
            else:
                print("‚ùå –≠—Ç–æ –Ω–µ SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
                return
            
            print(f"üìÅ –†–∞–±–æ—Ç–∞–µ–º —Å –±–∞–∑–æ–π: {db_path}")
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            backup_path = db_path + '.backup'
            if os.path.exists(db_path):
                import shutil
                shutil.copy2(db_path, backup_path)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SQLite –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ codeword_hash
            cursor.execute("PRAGMA table_info(users)")
            columns = [column[1] for column in cursor.fetchall()]
            print(f"üìä –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ users: {columns}")
            
            if 'codeword_hash' not in columns:
                print("üîÑ –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É codeword_hash...")
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
                cursor.execute('''
                    CREATE TABLE users_new (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        uuid VARCHAR(36) UNIQUE NOT NULL,
                        codeword_hash VARCHAR(64) NOT NULL DEFAULT '',
                        username VARCHAR(50) UNIQUE NOT NULL,
                        created_at DATETIME,
                        last_seen DATETIME,
                        is_online BOOLEAN DEFAULT 0
                    )
                ''')
                
                # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã
                if 'codeword' in columns:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä–∞—è –∫–æ–ª–æ–Ω–∫–∞ codeword - –ø–µ—Ä–µ–Ω–æ—Å–∏–º –µ—ë
                    cursor.execute('''
                        INSERT INTO users_new 
                        (id, uuid, codeword_hash, username, created_at, last_seen, is_online)
                        SELECT 
                            id, 
                            uuid, 
                            codeword as codeword_hash,  -- –ø–µ—Ä–µ–Ω–æ—Å–∏–º codeword –≤ codeword_hash
                            username, 
                            created_at, 
                            last_seen, 
                            is_online 
                        FROM users
                    ''')
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ codeword - —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    cursor.execute('''
                        INSERT INTO users_new 
                        (id, uuid, codeword_hash, username, created_at, last_seen, is_online)
                        SELECT 
                            id, 
                            uuid, 
                            '' as codeword_hash,  -- –ø—É—Å—Ç–æ–π —Ö–µ—à
                            username, 
                            created_at, 
                            last_seen, 
                            is_online 
                        FROM users
                    ''')
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—É—é
                cursor.execute('DROP TABLE users')
                cursor.execute('ALTER TABLE users_new RENAME TO users')
                
                print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã users –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            else:
                print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = [table[0] for table in cursor.fetchall()]
            print(f"üìã –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ: {tables}")
            
            conn.commit()
            conn.close()
            
            print("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            import traceback
            traceback.print_exc()
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if os.path.exists(backup_path):
                try:
                    shutil.copy2(backup_path, db_path)
                    print("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è")
                except:
                    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")

if __name__ == '__main__':
    migrate_database()